/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v1alpha1 "github.com/faroshq/faros-hub/pkg/apis/access/v1alpha1"
)

// RequestLister helps list Requests.
// All objects returned here must be treated as read-only.
type RequestLister interface {
	// List lists all Requests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Request, err error)
	// Requests returns an object that can list and get Requests.
	Requests(namespace string) RequestNamespaceLister
	RequestListerExpansion
}

// requestLister implements the RequestLister interface.
type requestLister struct {
	indexer cache.Indexer
}

// NewRequestLister returns a new RequestLister.
func NewRequestLister(indexer cache.Indexer) RequestLister {
	return &requestLister{indexer: indexer}
}

// List lists all Requests in the indexer.
func (s *requestLister) List(selector labels.Selector) (ret []*v1alpha1.Request, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Request))
	})
	return ret, err
}

// Requests returns an object that can list and get Requests.
func (s *requestLister) Requests(namespace string) RequestNamespaceLister {
	return requestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RequestNamespaceLister helps list and get Requests.
// All objects returned here must be treated as read-only.
type RequestNamespaceLister interface {
	// List lists all Requests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Request, err error)
	// Get retrieves the Request from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Request, error)
	RequestNamespaceListerExpansion
}

// requestNamespaceLister implements the RequestNamespaceLister
// interface.
type requestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Requests in the indexer for a given namespace.
func (s requestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Request, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Request))
	})
	return ret, err
}

// Get retrieves the Request from the indexer for a given namespace and name.
func (s requestNamespaceLister) Get(name string) (*v1alpha1.Request, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("request"), name)
	}
	return obj.(*v1alpha1.Request), nil
}
