/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/faroshq/faros-hub/pkg/apis/edge/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegistrationLister helps list Registrations.
// All objects returned here must be treated as read-only.
type RegistrationLister interface {
	// List lists all Registrations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Registration, err error)
	// Registrations returns an object that can list and get Registrations.
	Registrations(namespace string) RegistrationNamespaceLister
	RegistrationListerExpansion
}

// registrationLister implements the RegistrationLister interface.
type registrationLister struct {
	indexer cache.Indexer
}

// NewRegistrationLister returns a new RegistrationLister.
func NewRegistrationLister(indexer cache.Indexer) RegistrationLister {
	return &registrationLister{indexer: indexer}
}

// List lists all Registrations in the indexer.
func (s *registrationLister) List(selector labels.Selector) (ret []*v1alpha1.Registration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Registration))
	})
	return ret, err
}

// Registrations returns an object that can list and get Registrations.
func (s *registrationLister) Registrations(namespace string) RegistrationNamespaceLister {
	return registrationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegistrationNamespaceLister helps list and get Registrations.
// All objects returned here must be treated as read-only.
type RegistrationNamespaceLister interface {
	// List lists all Registrations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Registration, err error)
	// Get retrieves the Registration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Registration, error)
	RegistrationNamespaceListerExpansion
}

// registrationNamespaceLister implements the RegistrationNamespaceLister
// interface.
type registrationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Registrations in the indexer for a given namespace.
func (s registrationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Registration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Registration))
	})
	return ret, err
}

// Get retrieves the Registration from the indexer for a given namespace and name.
func (s registrationNamespaceLister) Get(name string) (*v1alpha1.Registration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("registration"), name)
	}
	return obj.(*v1alpha1.Registration), nil
}
