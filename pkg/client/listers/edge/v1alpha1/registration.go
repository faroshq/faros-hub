/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"	
	"github.com/kcp-dev/logicalcluster/v3"
	
	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/api/errors"

	edgev1alpha1 "github.com/faroshq/faros-hub/pkg/apis/edge/v1alpha1"
	)

// RegistrationClusterLister can list Registrations across all workspaces, or scope down to a RegistrationLister for one workspace.
// All objects returned here must be treated as read-only.
type RegistrationClusterLister interface {
	// List lists all Registrations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.Registration, err error)
	// Cluster returns a lister that can list and get Registrations in one workspace.
Cluster(clusterName logicalcluster.Name) RegistrationLister
RegistrationClusterListerExpansion
}

type registrationClusterLister struct {
	indexer cache.Indexer
}

// NewRegistrationClusterLister returns a new RegistrationClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewRegistrationClusterLister(indexer cache.Indexer) *registrationClusterLister {
	return &registrationClusterLister{indexer: indexer}
}

// List lists all Registrations in the indexer across all workspaces.
func (s *registrationClusterLister) List(selector labels.Selector) (ret []*edgev1alpha1.Registration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*edgev1alpha1.Registration))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Registrations.
func (s *registrationClusterLister) Cluster(clusterName logicalcluster.Name) RegistrationLister {
return &registrationLister{indexer: s.indexer, clusterName: clusterName}
}

// RegistrationLister can list Registrations across all namespaces, or scope down to a RegistrationNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type RegistrationLister interface {
	// List lists all Registrations in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.Registration, err error)
// Registrations returns a lister that can list and get Registrations in one workspace and namespace.
	Registrations(namespace string) RegistrationNamespaceLister
RegistrationListerExpansion
}
// registrationLister can list all Registrations inside a workspace or scope down to a RegistrationLister for one namespace.
type registrationLister struct {
	indexer cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Registrations in the indexer for a workspace.
func (s *registrationLister) List(selector labels.Selector) (ret []*edgev1alpha1.Registration, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Registration))
	})
	return ret, err
}

// Registrations returns an object that can list and get Registrations in one namespace.
func (s *registrationLister) Registrations(namespace string) RegistrationNamespaceLister {
return &registrationNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// registrationNamespaceLister helps list and get Registrations.
// All objects returned here must be treated as read-only.
type RegistrationNamespaceLister interface {
	// List lists all Registrations in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.Registration, err error)
	// Get retrieves the Registration from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*edgev1alpha1.Registration, error)
	RegistrationNamespaceListerExpansion
}
// registrationNamespaceLister helps list and get Registrations.
// All objects returned here must be treated as read-only.
type registrationNamespaceLister struct {
	indexer   cache.Indexer
	clusterName   logicalcluster.Name
	namespace string
}

// List lists all Registrations in the indexer for a given workspace and namespace.
func (s *registrationNamespaceLister) List(selector labels.Selector) (ret []*edgev1alpha1.Registration, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Registration))
	})
	return ret, err
}

// Get retrieves the Registration from the indexer for a given workspace, namespace and name.
func (s *registrationNamespaceLister) Get(name string) (*edgev1alpha1.Registration, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("Registration"), name)
	}
	return obj.(*edgev1alpha1.Registration), nil
}
// NewRegistrationLister returns a new RegistrationLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewRegistrationLister(indexer cache.Indexer) *registrationScopedLister {
	return &registrationScopedLister{indexer: indexer}
}

// registrationScopedLister can list all Registrations inside a workspace or scope down to a RegistrationLister for one namespace.
type registrationScopedLister struct {
	indexer cache.Indexer
}

// List lists all Registrations in the indexer for a workspace.
func (s *registrationScopedLister) List(selector labels.Selector) (ret []*edgev1alpha1.Registration, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Registration))
	})
	return ret, err
}

// Registrations returns an object that can list and get Registrations in one namespace.
func (s *registrationScopedLister) Registrations(namespace string) RegistrationNamespaceLister {
	return &registrationScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// registrationScopedNamespaceLister helps list and get Registrations.
type registrationScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Registrations in the indexer for a given workspace and namespace.
func (s *registrationScopedNamespaceLister) List(selector labels.Selector) (ret []*edgev1alpha1.Registration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Registration))
	})
	return ret, err
}

// Get retrieves the Registration from the indexer for a given workspace, namespace and name.
func (s *registrationScopedNamespaceLister) Get(name string) (*edgev1alpha1.Registration, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("Registration"), name)
	}
	return obj.(*edgev1alpha1.Registration), nil
}
