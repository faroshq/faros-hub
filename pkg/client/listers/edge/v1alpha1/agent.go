/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"	
	"github.com/kcp-dev/logicalcluster/v2"
	
	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/api/errors"

	edgev1alpha1 "github.com/faroshq/faros-hub/pkg/apis/edge/v1alpha1"
	)

// AgentClusterLister can list Agents across all workspaces, or scope down to a AgentLister for one workspace.
// All objects returned here must be treated as read-only.
type AgentClusterLister interface {
	// List lists all Agents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.Agent, err error)
	// Cluster returns a lister that can list and get Agents in one workspace.
Cluster(cluster logicalcluster.Name) AgentLister
AgentClusterListerExpansion
}

type agentClusterLister struct {
	indexer cache.Indexer
}

// NewAgentClusterLister returns a new AgentClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewAgentClusterLister(indexer cache.Indexer) *agentClusterLister {
	return &agentClusterLister{indexer: indexer}
}

// List lists all Agents in the indexer across all workspaces.
func (s *agentClusterLister) List(selector labels.Selector) (ret []*edgev1alpha1.Agent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*edgev1alpha1.Agent))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Agents.
func (s *agentClusterLister) Cluster(cluster logicalcluster.Name) AgentLister {
return &agentLister{indexer: s.indexer, cluster: cluster}
}

// AgentLister can list Agents across all namespaces, or scope down to a AgentNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type AgentLister interface {
	// List lists all Agents in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.Agent, err error)
// Agents returns a lister that can list and get Agents in one workspace and namespace.
	Agents(namespace string) AgentNamespaceLister
AgentListerExpansion
}
// agentLister can list all Agents inside a workspace or scope down to a AgentLister for one namespace.
type agentLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all Agents in the indexer for a workspace.
func (s *agentLister) List(selector labels.Selector) (ret []*edgev1alpha1.Agent, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.cluster, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Agent))
	})
	return ret, err
}

// Agents returns an object that can list and get Agents in one namespace.
func (s *agentLister) Agents(namespace string) AgentNamespaceLister {
return &agentNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// agentNamespaceLister helps list and get Agents.
// All objects returned here must be treated as read-only.
type AgentNamespaceLister interface {
	// List lists all Agents in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*edgev1alpha1.Agent, err error)
	// Get retrieves the Agent from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*edgev1alpha1.Agent, error)
	AgentNamespaceListerExpansion
}
// agentNamespaceLister helps list and get Agents.
// All objects returned here must be treated as read-only.
type agentNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all Agents in the indexer for a given workspace and namespace.
func (s *agentNamespaceLister) List(selector labels.Selector) (ret []*edgev1alpha1.Agent, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.cluster, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Agent))
	})
	return ret, err
}

// Get retrieves the Agent from the indexer for a given workspace, namespace and name.
func (s *agentNamespaceLister) Get(name string) (*edgev1alpha1.Agent, error) {
	key := kcpcache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("Agent"), name)
	}
	return obj.(*edgev1alpha1.Agent), nil
}
// NewAgentLister returns a new AgentLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewAgentLister(indexer cache.Indexer) *agentScopedLister {
	return &agentScopedLister{indexer: indexer}
}

// agentScopedLister can list all Agents inside a workspace or scope down to a AgentLister for one namespace.
type agentScopedLister struct {
	indexer cache.Indexer
}

// List lists all Agents in the indexer for a workspace.
func (s *agentScopedLister) List(selector labels.Selector) (ret []*edgev1alpha1.Agent, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Agent))
	})
	return ret, err
}

// Agents returns an object that can list and get Agents in one namespace.
func (s *agentScopedLister) Agents(namespace string) AgentNamespaceLister {
	return &agentScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// agentScopedNamespaceLister helps list and get Agents.
type agentScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Agents in the indexer for a given workspace and namespace.
func (s *agentScopedNamespaceLister) List(selector labels.Selector) (ret []*edgev1alpha1.Agent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*edgev1alpha1.Agent))
	})
	return ret, err
}

// Get retrieves the Agent from the indexer for a given workspace, namespace and name.
func (s *agentScopedNamespaceLister) Get(name string) (*edgev1alpha1.Agent, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(edgev1alpha1.Resource("Agent"), name)
	}
	return obj.(*edgev1alpha1.Agent), nil
}
