/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/api/errors"

	pluginsv1alpha1 "github.com/faroshq/faros-hub/pkg/apis/plugins/v1alpha1"
	)

// BindingClusterLister can list Bindings across all workspaces, or scope down to a BindingLister for one workspace.
// All objects returned here must be treated as read-only.
type BindingClusterLister interface {
	// List lists all Bindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*pluginsv1alpha1.Binding, err error)
	// Cluster returns a lister that can list and get Bindings in one workspace.
	Cluster(clusterName logicalcluster.Name) BindingLister
	BindingClusterListerExpansion
}

type bindingClusterLister struct {
	indexer cache.Indexer
}

// NewBindingClusterLister returns a new BindingClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewBindingClusterLister(indexer cache.Indexer) *bindingClusterLister {
	return &bindingClusterLister{indexer: indexer}
}

// List lists all Bindings in the indexer across all workspaces.
func (s *bindingClusterLister) List(selector labels.Selector) (ret []*pluginsv1alpha1.Binding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*pluginsv1alpha1.Binding))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Bindings.
func (s *bindingClusterLister) Cluster(clusterName logicalcluster.Name) BindingLister {
return &bindingLister{indexer: s.indexer, clusterName: clusterName}
}

// BindingLister can list Bindings across all namespaces, or scope down to a BindingNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type BindingLister interface {
	// List lists all Bindings in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*pluginsv1alpha1.Binding, err error)
// Bindings returns a lister that can list and get Bindings in one workspace and namespace.
	Bindings(namespace string) BindingNamespaceLister
BindingListerExpansion
}
// bindingLister can list all Bindings inside a workspace or scope down to a BindingLister for one namespace.
type bindingLister struct {
	indexer cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Bindings in the indexer for a workspace.
func (s *bindingLister) List(selector labels.Selector) (ret []*pluginsv1alpha1.Binding, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*pluginsv1alpha1.Binding))
	})
	return ret, err
}

// Bindings returns an object that can list and get Bindings in one namespace.
func (s *bindingLister) Bindings(namespace string) BindingNamespaceLister {
return &bindingNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// bindingNamespaceLister helps list and get Bindings.
// All objects returned here must be treated as read-only.
type BindingNamespaceLister interface {
	// List lists all Bindings in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*pluginsv1alpha1.Binding, err error)
	// Get retrieves the Binding from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*pluginsv1alpha1.Binding, error)
	BindingNamespaceListerExpansion
}
// bindingNamespaceLister helps list and get Bindings.
// All objects returned here must be treated as read-only.
type bindingNamespaceLister struct {
	indexer   cache.Indexer
	clusterName   logicalcluster.Name
	namespace string
}

// List lists all Bindings in the indexer for a given workspace and namespace.
func (s *bindingNamespaceLister) List(selector labels.Selector) (ret []*pluginsv1alpha1.Binding, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*pluginsv1alpha1.Binding))
	})
	return ret, err
}

// Get retrieves the Binding from the indexer for a given workspace, namespace and name.
func (s *bindingNamespaceLister) Get(name string) (*pluginsv1alpha1.Binding, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(pluginsv1alpha1.Resource("Binding"), name)
	}
	return obj.(*pluginsv1alpha1.Binding), nil
}
// NewBindingLister returns a new BindingLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewBindingLister(indexer cache.Indexer) *bindingScopedLister {
	return &bindingScopedLister{indexer: indexer}
}

// bindingScopedLister can list all Bindings inside a workspace or scope down to a BindingLister for one namespace.
type bindingScopedLister struct {
	indexer cache.Indexer
}

// List lists all Bindings in the indexer for a workspace.
func (s *bindingScopedLister) List(selector labels.Selector) (ret []*pluginsv1alpha1.Binding, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*pluginsv1alpha1.Binding))
	})
	return ret, err
}

// Bindings returns an object that can list and get Bindings in one namespace.
func (s *bindingScopedLister) Bindings(namespace string) BindingNamespaceLister {
	return &bindingScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// bindingScopedNamespaceLister helps list and get Bindings.
type bindingScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Bindings in the indexer for a given workspace and namespace.
func (s *bindingScopedNamespaceLister) List(selector labels.Selector) (ret []*pluginsv1alpha1.Binding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*pluginsv1alpha1.Binding))
	})
	return ret, err
}

// Get retrieves the Binding from the indexer for a given workspace, namespace and name.
func (s *bindingScopedNamespaceLister) Get(name string) (*pluginsv1alpha1.Binding, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(pluginsv1alpha1.Resource("Binding"), name)
	}
	return obj.(*pluginsv1alpha1.Binding), nil
}
