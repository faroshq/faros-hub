/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/faroshq/faros-hub/pkg/apis/plugins/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MonitoringLister helps list Monitorings.
// All objects returned here must be treated as read-only.
type MonitoringLister interface {
	// List lists all Monitorings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Monitoring, err error)
	// Monitorings returns an object that can list and get Monitorings.
	Monitorings(namespace string) MonitoringNamespaceLister
	MonitoringListerExpansion
}

// monitoringLister implements the MonitoringLister interface.
type monitoringLister struct {
	indexer cache.Indexer
}

// NewMonitoringLister returns a new MonitoringLister.
func NewMonitoringLister(indexer cache.Indexer) MonitoringLister {
	return &monitoringLister{indexer: indexer}
}

// List lists all Monitorings in the indexer.
func (s *monitoringLister) List(selector labels.Selector) (ret []*v1alpha1.Monitoring, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Monitoring))
	})
	return ret, err
}

// Monitorings returns an object that can list and get Monitorings.
func (s *monitoringLister) Monitorings(namespace string) MonitoringNamespaceLister {
	return monitoringNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MonitoringNamespaceLister helps list and get Monitorings.
// All objects returned here must be treated as read-only.
type MonitoringNamespaceLister interface {
	// List lists all Monitorings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Monitoring, err error)
	// Get retrieves the Monitoring from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Monitoring, error)
	MonitoringNamespaceListerExpansion
}

// monitoringNamespaceLister implements the MonitoringNamespaceLister
// interface.
type monitoringNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Monitorings in the indexer for a given namespace.
func (s monitoringNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Monitoring, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Monitoring))
	})
	return ret, err
}

// Get retrieves the Monitoring from the indexer for a given namespace and name.
func (s monitoringNamespaceLister) Get(name string) (*v1alpha1.Monitoring, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("monitoring"), name)
	}
	return obj.(*v1alpha1.Monitoring), nil
}
