/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/faroshq/faros-hub/pkg/apis/plugins/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccessLister helps list Accesses.
// All objects returned here must be treated as read-only.
type AccessLister interface {
	// List lists all Accesses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Access, err error)
	// Accesses returns an object that can list and get Accesses.
	Accesses(namespace string) AccessNamespaceLister
	AccessListerExpansion
}

// accessLister implements the AccessLister interface.
type accessLister struct {
	indexer cache.Indexer
}

// NewAccessLister returns a new AccessLister.
func NewAccessLister(indexer cache.Indexer) AccessLister {
	return &accessLister{indexer: indexer}
}

// List lists all Accesses in the indexer.
func (s *accessLister) List(selector labels.Selector) (ret []*v1alpha1.Access, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Access))
	})
	return ret, err
}

// Accesses returns an object that can list and get Accesses.
func (s *accessLister) Accesses(namespace string) AccessNamespaceLister {
	return accessNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccessNamespaceLister helps list and get Accesses.
// All objects returned here must be treated as read-only.
type AccessNamespaceLister interface {
	// List lists all Accesses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Access, err error)
	// Get retrieves the Access from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Access, error)
	AccessNamespaceListerExpansion
}

// accessNamespaceLister implements the AccessNamespaceLister
// interface.
type accessNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Accesses in the indexer for a given namespace.
func (s accessNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Access, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Access))
	})
	return ret, err
}

// Get retrieves the Access from the indexer for a given namespace and name.
func (s accessNamespaceLister) Get(name string) (*v1alpha1.Access, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("access"), name)
	}
	return obj.(*v1alpha1.Access), nil
}
