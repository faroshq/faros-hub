/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"	
	"github.com/kcp-dev/logicalcluster/v3"
	
	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/api/errors"

	tenancyv1alpha1 "github.com/faroshq/faros-hub/pkg/apis/tenancy/v1alpha1"
	)

// UserClusterLister can list Users across all workspaces, or scope down to a UserLister for one workspace.
// All objects returned here must be treated as read-only.
type UserClusterLister interface {
	// List lists all Users in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*tenancyv1alpha1.User, err error)
	// Cluster returns a lister that can list and get Users in one workspace.
Cluster(clusterName logicalcluster.Name) UserLister
UserClusterListerExpansion
}

type userClusterLister struct {
	indexer cache.Indexer
}

// NewUserClusterLister returns a new UserClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewUserClusterLister(indexer cache.Indexer) *userClusterLister {
	return &userClusterLister{indexer: indexer}
}

// List lists all Users in the indexer across all workspaces.
func (s *userClusterLister) List(selector labels.Selector) (ret []*tenancyv1alpha1.User, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*tenancyv1alpha1.User))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Users.
func (s *userClusterLister) Cluster(clusterName logicalcluster.Name) UserLister {
return &userLister{indexer: s.indexer, clusterName: clusterName}
}

// UserLister can list all Users, or get one in particular.
// All objects returned here must be treated as read-only.
type UserLister interface {
	// List lists all Users in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*tenancyv1alpha1.User, err error)
// Get retrieves the User from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*tenancyv1alpha1.User, error)
UserListerExpansion
}
// userLister can list all Users inside a workspace.
type userLister struct {
	indexer cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Users in the indexer for a workspace.
func (s *userLister) List(selector labels.Selector) (ret []*tenancyv1alpha1.User, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*tenancyv1alpha1.User))
	})
	return ret, err
}

// Get retrieves the User from the indexer for a given workspace and name.
func (s *userLister) Get(name string) (*tenancyv1alpha1.User, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(tenancyv1alpha1.Resource("User"), name)
	}
	return obj.(*tenancyv1alpha1.User), nil
}
// NewUserLister returns a new UserLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewUserLister(indexer cache.Indexer) *userScopedLister {
	return &userScopedLister{indexer: indexer}
}

// userScopedLister can list all Users inside a workspace.
type userScopedLister struct {
	indexer cache.Indexer
}

// List lists all Users in the indexer for a workspace.
func (s *userScopedLister) List(selector labels.Selector) (ret []*tenancyv1alpha1.User, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*tenancyv1alpha1.User))
	})
	return ret, err
}

// Get retrieves the User from the indexer for a given workspace and name.
func (s *userScopedLister) Get(name string) (*tenancyv1alpha1.User, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(tenancyv1alpha1.Resource("User"), name)
	}
	return obj.(*tenancyv1alpha1.User), nil
}
