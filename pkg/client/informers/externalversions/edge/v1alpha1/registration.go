/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v2"

	edgev1alpha1 "github.com/faroshq/faros-hub/pkg/apis/edge/v1alpha1"
	edgev1alpha1listers "github.com/faroshq/faros-hub/pkg/client/listers/edge/v1alpha1"
	clientset "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/cluster"
	scopedclientset "github.com/faroshq/faros-hub/pkg/client/clientset/versioned"
	"github.com/faroshq/faros-hub/pkg/client/informers/externalversions/internalinterfaces"
)

// RegistrationClusterInformer provides access to a shared informer and lister for
// Registrations.
type RegistrationClusterInformer interface {
	Cluster(logicalcluster.Name) RegistrationInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() edgev1alpha1listers.RegistrationClusterLister
}

type registrationClusterInformer struct {
	factory internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewRegistrationClusterInformer constructs a new informer for Registration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewRegistrationClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredRegistrationClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredRegistrationClusterInformer constructs a new informer for Registration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredRegistrationClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().Registrations().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().Registrations().Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.Registration{},
		resyncPeriod,
		indexers,
	)
}

func (f *registrationClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredRegistrationClusterInformer(client, resyncPeriod, cache.Indexers{
			kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
			kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,}, 
		f.tweakListOptions,
	)
}

func (f *registrationClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.Registration{}, f.defaultInformer)
}

func (f *registrationClusterInformer) Lister() edgev1alpha1listers.RegistrationClusterLister {
	return edgev1alpha1listers.NewRegistrationClusterLister(f.Informer().GetIndexer())
}


// RegistrationInformer provides access to a shared informer and lister for
// Registrations.
type RegistrationInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() edgev1alpha1listers.RegistrationLister
}
func (f *registrationClusterInformer) Cluster(cluster logicalcluster.Name) RegistrationInformer {
	return &registrationInformer{
		informer: f.Informer().Cluster(cluster),
		lister:   f.Lister().Cluster(cluster),
	}
}

type registrationInformer struct {
	informer cache.SharedIndexInformer
	lister edgev1alpha1listers.RegistrationLister
}

func (f *registrationInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *registrationInformer) Lister() edgev1alpha1listers.RegistrationLister {
	return f.lister
}

type registrationScopedInformer struct {
	factory internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace string}

func (f *registrationScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&edgev1alpha1.Registration{}, f.defaultInformer)
}

func (f *registrationScopedInformer) Lister() edgev1alpha1listers.RegistrationLister {
	return edgev1alpha1listers.NewRegistrationLister(f.Informer().GetIndexer())
}

// NewRegistrationInformer constructs a new informer for Registration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewRegistrationInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string,indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredRegistrationInformer(client, resyncPeriod,  namespace,indexers, nil)
}

// NewFilteredRegistrationInformer constructs a new informer for Registration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredRegistrationInformer(client scopedclientset.Interface, resyncPeriod time.Duration,  namespace string,indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().Registrations(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EdgeV1alpha1().Registrations(namespace).Watch(context.TODO(), options)
			},
		},
		&edgev1alpha1.Registration{},
		resyncPeriod,
		indexers,
	)
}

func (f *registrationScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredRegistrationInformer(client, resyncPeriod, f.namespace,cache.Indexers{ 
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	}, f.tweakListOptions)
}

