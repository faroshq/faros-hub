/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	pluginsv1alpha1 "github.com/faroshq/faros-hub/pkg/apis/plugins/v1alpha1"
	pluginsv1alpha1listers "github.com/faroshq/faros-hub/pkg/client/listers/plugins/v1alpha1"
	clientset "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/cluster"
	scopedclientset "github.com/faroshq/faros-hub/pkg/client/clientset/versioned"
	"github.com/faroshq/faros-hub/pkg/client/informers/externalversions/internalinterfaces"
)

// BindingClusterInformer provides access to a shared informer and lister for
// Bindings.
type BindingClusterInformer interface {
	Cluster(logicalcluster.Name) BindingInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() pluginsv1alpha1listers.BindingClusterLister
}

type bindingClusterInformer struct {
	factory internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewBindingClusterInformer constructs a new informer for Binding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewBindingClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredBindingClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredBindingClusterInformer constructs a new informer for Binding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredBindingClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PluginsV1alpha1().Bindings().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PluginsV1alpha1().Bindings().Watch(context.TODO(), options)
			},
		},
		&pluginsv1alpha1.Binding{},
		resyncPeriod,
		indexers,
	)
}

func (f *bindingClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredBindingClusterInformer(client, resyncPeriod, cache.Indexers{
			kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
			kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,}, 
		f.tweakListOptions,
	)
}

func (f *bindingClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&pluginsv1alpha1.Binding{}, f.defaultInformer)
}

func (f *bindingClusterInformer) Lister() pluginsv1alpha1listers.BindingClusterLister {
	return pluginsv1alpha1listers.NewBindingClusterLister(f.Informer().GetIndexer())
}


// BindingInformer provides access to a shared informer and lister for
// Bindings.
type BindingInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() pluginsv1alpha1listers.BindingLister
}
func (f *bindingClusterInformer) Cluster(clusterName logicalcluster.Name) BindingInformer {
	return &bindingInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type bindingInformer struct {
	informer cache.SharedIndexInformer
	lister pluginsv1alpha1listers.BindingLister
}

func (f *bindingInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *bindingInformer) Lister() pluginsv1alpha1listers.BindingLister {
	return f.lister
}

type bindingScopedInformer struct {
	factory internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace string}

func (f *bindingScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&pluginsv1alpha1.Binding{}, f.defaultInformer)
}

func (f *bindingScopedInformer) Lister() pluginsv1alpha1listers.BindingLister {
	return pluginsv1alpha1listers.NewBindingLister(f.Informer().GetIndexer())
}

// NewBindingInformer constructs a new informer for Binding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewBindingInformer(client scopedclientset.Interface, resyncPeriod time.Duration, namespace string,indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredBindingInformer(client, resyncPeriod,  namespace,indexers, nil)
}

// NewFilteredBindingInformer constructs a new informer for Binding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredBindingInformer(client scopedclientset.Interface, resyncPeriod time.Duration,  namespace string,indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PluginsV1alpha1().Bindings(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PluginsV1alpha1().Bindings(namespace).Watch(context.TODO(), options)
			},
		},
		&pluginsv1alpha1.Binding{},
		resyncPeriod,
		indexers,
	)
}

func (f *bindingScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredBindingInformer(client, resyncPeriod, f.namespace,cache.Indexers{ 
		cache.NamespaceIndex: cache.MetaNamespaceIndexFunc,
	}, f.tweakListOptions)
}

