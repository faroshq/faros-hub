/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v2"

	pluginsv1alpha1 "github.com/faroshq/faros-hub/pkg/apis/plugins/v1alpha1"
	pluginsv1alpha1listers "github.com/faroshq/faros-hub/pkg/client/listers/plugins/v1alpha1"
	clientset "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/cluster"
	scopedclientset "github.com/faroshq/faros-hub/pkg/client/clientset/versioned"
	"github.com/faroshq/faros-hub/pkg/client/informers/externalversions/internalinterfaces"
)

// RequestClusterInformer provides access to a shared informer and lister for
// Requests.
type RequestClusterInformer interface {
	Cluster(logicalcluster.Name) RequestInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() pluginsv1alpha1listers.RequestClusterLister
}

type requestClusterInformer struct {
	factory internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewRequestClusterInformer constructs a new informer for Request type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewRequestClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredRequestClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredRequestClusterInformer constructs a new informer for Request type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredRequestClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PluginsV1alpha1().Requests().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PluginsV1alpha1().Requests().Watch(context.TODO(), options)
			},
		},
		&pluginsv1alpha1.Request{},
		resyncPeriod,
		indexers,
	)
}

func (f *requestClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredRequestClusterInformer(client, resyncPeriod, cache.Indexers{
			kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
			}, 
		f.tweakListOptions,
	)
}

func (f *requestClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&pluginsv1alpha1.Request{}, f.defaultInformer)
}

func (f *requestClusterInformer) Lister() pluginsv1alpha1listers.RequestClusterLister {
	return pluginsv1alpha1listers.NewRequestClusterLister(f.Informer().GetIndexer())
}


// RequestInformer provides access to a shared informer and lister for
// Requests.
type RequestInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() pluginsv1alpha1listers.RequestLister
}
func (f *requestClusterInformer) Cluster(cluster logicalcluster.Name) RequestInformer {
	return &requestInformer{
		informer: f.Informer().Cluster(cluster),
		lister:   f.Lister().Cluster(cluster),
	}
}

type requestInformer struct {
	informer cache.SharedIndexInformer
	lister pluginsv1alpha1listers.RequestLister
}

func (f *requestInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *requestInformer) Lister() pluginsv1alpha1listers.RequestLister {
	return f.lister
}

type requestScopedInformer struct {
	factory internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	}

func (f *requestScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&pluginsv1alpha1.Request{}, f.defaultInformer)
}

func (f *requestScopedInformer) Lister() pluginsv1alpha1listers.RequestLister {
	return pluginsv1alpha1listers.NewRequestLister(f.Informer().GetIndexer())
}

// NewRequestInformer constructs a new informer for Request type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewRequestInformer(client scopedclientset.Interface, resyncPeriod time.Duration,indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredRequestInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredRequestInformer constructs a new informer for Request type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredRequestInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PluginsV1alpha1().Requests().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PluginsV1alpha1().Requests().Watch(context.TODO(), options)
			},
		},
		&pluginsv1alpha1.Request{},
		resyncPeriod,
		indexers,
	)
}

func (f *requestScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredRequestInformer(client, resyncPeriod,cache.Indexers{ }, f.tweakListOptions)
}

