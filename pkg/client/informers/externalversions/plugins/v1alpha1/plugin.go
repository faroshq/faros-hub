/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v2"

	pluginsv1alpha1 "github.com/faroshq/faros-hub/pkg/apis/plugins/v1alpha1"
	pluginsv1alpha1listers "github.com/faroshq/faros-hub/pkg/client/listers/plugins/v1alpha1"
	clientset "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/cluster"
	scopedclientset "github.com/faroshq/faros-hub/pkg/client/clientset/versioned"
	"github.com/faroshq/faros-hub/pkg/client/informers/externalversions/internalinterfaces"
)

// PluginClusterInformer provides access to a shared informer and lister for
// Plugins.
type PluginClusterInformer interface {
	Cluster(logicalcluster.Name) PluginInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() pluginsv1alpha1listers.PluginClusterLister
}

type pluginClusterInformer struct {
	factory internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewPluginClusterInformer constructs a new informer for Plugin type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPluginClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredPluginClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredPluginClusterInformer constructs a new informer for Plugin type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredPluginClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PluginsV1alpha1().Plugins().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PluginsV1alpha1().Plugins().Watch(context.TODO(), options)
			},
		},
		&pluginsv1alpha1.Plugin{},
		resyncPeriod,
		indexers,
	)
}

func (f *pluginClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredPluginClusterInformer(client, resyncPeriod, cache.Indexers{
			kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
			}, 
		f.tweakListOptions,
	)
}

func (f *pluginClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&pluginsv1alpha1.Plugin{}, f.defaultInformer)
}

func (f *pluginClusterInformer) Lister() pluginsv1alpha1listers.PluginClusterLister {
	return pluginsv1alpha1listers.NewPluginClusterLister(f.Informer().GetIndexer())
}


// PluginInformer provides access to a shared informer and lister for
// Plugins.
type PluginInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() pluginsv1alpha1listers.PluginLister
}
func (f *pluginClusterInformer) Cluster(cluster logicalcluster.Name) PluginInformer {
	return &pluginInformer{
		informer: f.Informer().Cluster(cluster),
		lister:   f.Lister().Cluster(cluster),
	}
}

type pluginInformer struct {
	informer cache.SharedIndexInformer
	lister pluginsv1alpha1listers.PluginLister
}

func (f *pluginInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *pluginInformer) Lister() pluginsv1alpha1listers.PluginLister {
	return f.lister
}

type pluginScopedInformer struct {
	factory internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	}

func (f *pluginScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&pluginsv1alpha1.Plugin{}, f.defaultInformer)
}

func (f *pluginScopedInformer) Lister() pluginsv1alpha1listers.PluginLister {
	return pluginsv1alpha1listers.NewPluginLister(f.Informer().GetIndexer())
}

// NewPluginInformer constructs a new informer for Plugin type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPluginInformer(client scopedclientset.Interface, resyncPeriod time.Duration,indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredPluginInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredPluginInformer constructs a new informer for Plugin type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredPluginInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PluginsV1alpha1().Plugins().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PluginsV1alpha1().Plugins().Watch(context.TODO(), options)
			},
		},
		&pluginsv1alpha1.Plugin{},
		resyncPeriod,
		indexers,
	)
}

func (f *pluginScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredPluginInformer(client, resyncPeriod,cache.Indexers{ }, f.tweakListOptions)
}

