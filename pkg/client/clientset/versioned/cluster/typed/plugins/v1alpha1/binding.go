/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpclient "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster/v2"
	"context"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/watch"
	pluginsv1alpha1 "github.com/faroshq/faros-hub/pkg/apis/plugins/v1alpha1"


	pluginsv1alpha1client "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/typed/plugins/v1alpha1"
)

// BindingsClusterGetter has a method to return a BindingClusterInterface.
// A group's cluster client should implement this interface.
type BindingsClusterGetter interface {
	Bindings() BindingClusterInterface
}

// BindingClusterInterface can operate on Bindings across all clusters,
// or scope down to one cluster and return a BindingsNamespacer.
type BindingClusterInterface interface {
	Cluster(logicalcluster.Name) BindingsNamespacer
	List(ctx context.Context, opts metav1.ListOptions) (*pluginsv1alpha1.BindingList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
}

type bindingsClusterInterface struct {
	clientCache kcpclient.Cache[*pluginsv1alpha1client.PluginsV1alpha1Client]
}

// Cluster scopes the client down to a particular cluster.
func (c *bindingsClusterInterface) Cluster(name logicalcluster.Name) BindingsNamespacer {
	if name == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}

	return &bindingsNamespacer{clientCache: c.clientCache, name: name}
}


// List returns the entire collection of all Bindings across all clusters. 
func (c *bindingsClusterInterface) List(ctx context.Context, opts metav1.ListOptions) (*pluginsv1alpha1.BindingList, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).Bindings(metav1.NamespaceAll).List(ctx, opts)
}

// Watch begins to watch all Bindings across all clusters.
func (c *bindingsClusterInterface) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).Bindings(metav1.NamespaceAll).Watch(ctx, opts)
}
// BindingsNamespacer can scope to objects within a namespace, returning a pluginsv1alpha1client.BindingInterface.
type BindingsNamespacer interface {
	Namespace(string) pluginsv1alpha1client.BindingInterface
}

type bindingsNamespacer struct {
	clientCache kcpclient.Cache[*pluginsv1alpha1client.PluginsV1alpha1Client]
	name logicalcluster.Name
}

func (n *bindingsNamespacer) Namespace(namespace string) pluginsv1alpha1client.BindingInterface {
	return n.clientCache.ClusterOrDie(n.name).Bindings(namespace)
}
