/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package fake

import (
	kcptesting "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/testing"
	kcpfakediscovery "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/discovery/fake"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/discovery"

	client "github.com/faroshq/faros-hub/pkg/client/clientset/versioned"
	clientscheme "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/scheme"

	kcpclient "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/cluster"
	edgev1alpha1 "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/typed/edge/v1alpha1"
	pluginsv1alpha1 "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/typed/plugins/v1alpha1"
	tenancyv1alpha1 "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/typed/tenancy/v1alpha1"
	kcpedgev1alpha1 "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/cluster/typed/edge/v1alpha1"
	kcppluginsv1alpha1 "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/cluster/typed/plugins/v1alpha1"
	kcptenancyv1alpha1 "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/cluster/typed/tenancy/v1alpha1"
	fakeedgev1alpha1 "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/cluster/typed/edge/v1alpha1/fake"
	fakepluginsv1alpha1 "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/cluster/typed/plugins/v1alpha1/fake"
	faketenancyv1alpha1 "github.com/faroshq/faros-hub/pkg/client/clientset/versioned/cluster/typed/tenancy/v1alpha1/fake"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *ClusterClientset {
	o := kcptesting.NewObjectTracker(clientscheme.Scheme, clientscheme.Codecs.UniversalDecoder())
	o.AddAll(objects...)

	cs := &ClusterClientset{Fake: &kcptesting.Fake{}, tracker: o}
	cs.discovery = &kcpfakediscovery.FakeDiscovery{Fake: cs.Fake, ClusterPath: logicalcluster.Wildcard}
	cs.AddReactor("*", "*", kcptesting.ObjectReaction(o))
	cs.AddWatchReactor("*", kcptesting.WatchReaction(o))

	return cs
}

var _ kcpclient.ClusterInterface = (*ClusterClientset)(nil)

// ClusterClientset contains the clients for groups.
type ClusterClientset struct {
	*kcptesting.Fake
	discovery *kcpfakediscovery.FakeDiscovery
	tracker   kcptesting.ObjectTracker
}

// Discovery retrieves the DiscoveryClient
func (c *ClusterClientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *ClusterClientset) Tracker() kcptesting.ObjectTracker {
	return c.tracker
}


// EdgeV1alpha1 retrieves the EdgeV1alpha1ClusterClient.  
func (c *ClusterClientset) EdgeV1alpha1() kcpedgev1alpha1.EdgeV1alpha1ClusterInterface {
	return &fakeedgev1alpha1.EdgeV1alpha1ClusterClient{Fake: c.Fake}
}

// PluginsV1alpha1 retrieves the PluginsV1alpha1ClusterClient.  
func (c *ClusterClientset) PluginsV1alpha1() kcppluginsv1alpha1.PluginsV1alpha1ClusterInterface {
	return &fakepluginsv1alpha1.PluginsV1alpha1ClusterClient{Fake: c.Fake}
}

// TenancyV1alpha1 retrieves the TenancyV1alpha1ClusterClient.  
func (c *ClusterClientset) TenancyV1alpha1() kcptenancyv1alpha1.TenancyV1alpha1ClusterInterface {
	return &faketenancyv1alpha1.TenancyV1alpha1ClusterClient{Fake: c.Fake}
}
// Cluster scopes this clientset to one cluster.
func (c *ClusterClientset) Cluster(clusterPath logicalcluster.Path) client.Interface {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}
	return &Clientset{
		Fake: c.Fake,
		discovery: &kcpfakediscovery.FakeDiscovery{Fake: c.Fake, ClusterPath: clusterPath},
		tracker: c.tracker.Cluster(clusterPath),
		clusterPath: clusterPath,
	}
}

var _ client.Interface = (*Clientset)(nil)

// Clientset contains the clients for groups.
type Clientset struct {
	*kcptesting.Fake
	discovery *kcpfakediscovery.FakeDiscovery
	tracker   kcptesting.ScopedObjectTracker
	clusterPath logicalcluster.Path
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() kcptesting.ScopedObjectTracker {
	return c.tracker
}


// EdgeV1alpha1 retrieves the EdgeV1alpha1Client.  
func (c *Clientset) EdgeV1alpha1() edgev1alpha1.EdgeV1alpha1Interface {
	return &fakeedgev1alpha1.EdgeV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// PluginsV1alpha1 retrieves the PluginsV1alpha1Client.  
func (c *Clientset) PluginsV1alpha1() pluginsv1alpha1.PluginsV1alpha1Interface {
	return &fakepluginsv1alpha1.PluginsV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// TenancyV1alpha1 retrieves the TenancyV1alpha1Client.  
func (c *Clientset) TenancyV1alpha1() tenancyv1alpha1.TenancyV1alpha1Interface {
	return &faketenancyv1alpha1.TenancyV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}
